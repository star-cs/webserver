/*
            Copyright Oliver Kowalke 2009.
   Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
            http://www.boost.org/LICENSE_1_0.txt)
*/

/****************************************************************************************
 *                                                                                      *
 *  ----------------------------------------------------------------------------------  *
 *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  | fc_mxcsr|fc_x87_cw|        R12        |         R13        |        R14        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        R15        |        RBX        |         RBP        |        RIP        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |    16   |   17    |                                                            |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x40  |   0x44  |                                                            |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        EXIT       |                                                            |  *
 *  ----------------------------------------------------------------------------------  *
 *                                                                                      *
 *                                                                                      *
 *  上下文栈内存布局（每个单元4字节）                                                       *
 *  ----------------------------------------------------------------------------------  *
 *  | 偏移量  |  寄存器/用途          | 说明                                           *
 *  ----------------------------------------------------------------------------------  *
 *  | 0x00    | fc_mxcsr             | MXCSR 寄存器（SSE控制状态）                    *
 *  | 0x04    | fc_x87_cw            | x87 FPU控制字                                  *
 *  | 0x08    | R12                  | 被调用者保存寄存器                             *
 *  | 0x10    | R13                  | 被调用者保存寄存器                             *
 *  | 0x18    | R14                  | 被调用者保存寄存器                             *
 *  | 0x20    | R15                  | 被调用者保存寄存器                             *
 *  | 0x28    | RBX                  | 被调用者保存寄存器                             *
 *  | 0x30    | RBP                  | 栈基址寄存器                                   *
 *  | 0x38    | RIP                  | 上下文入口函数地址                             *
 *  | 0x40    | EXIT                 | 上下文函数退出后的返回地址（指向finish标签）   *
 *  ----------------------------------------------------------------------------------  *
 ****************************************************************************************/

.text
.globl libgo_make_fcontext
.type libgo_make_fcontext,@function
.align 16  # 16字节对齐保证SSE指令正确执行

libgo_make_fcontext:
    # 参数说明：
    # rdi = 栈顶地址
    # rdx = 上下文入口函数地址
    
    # 将栈顶地址存入rax
    movq  %rdi, %rax
    
    # 将地址对齐到16字节边界（低4位清零）
    # 保证后续SSE指令的内存访问对齐要求
    andq  $-16, %rax
    
    # 在栈顶预留0x48字节空间（72字节，对应上下文结构）
    # 预留空间计算：0x48 = 72 bytes = 9个8字节寄存器存储位置
    leaq  -0x48(%rax), %rax
    
    # 将入口函数地址存储到RIP位置（偏移量0x38）
    movq  %rdx, 0x38(%rax)
    
    # 保存SSE控制状态寄存器MXCSR到栈顶（偏移量0x0）
    stmxcsr  (%rax)
    
    # 保存x87 FPU控制字到偏移量0x4位置
    fnstcw   0x4(%rax)
    
    # 计算finish标签的绝对地址（用于上下文函数退出后的清理）
    leaq  finish(%rip), %rcx
    
    # 设置上下文函数返回地址为finish（偏移量0x40）
    movq  %rcx, 0x40(%rax)
    
    # 返回创建好的上下文结构指针（rax已指向结构体起始地址）
    ret

# 上下文函数执行完成后的清理例程
finish:
    # 设置退出码为0
    xorq  %rdi, %rdi
    
    # 调用系统退出函数（_exit）
    call  _exit@PLT
    
    # 安全屏障（理论上不会执行到这里）
    hlt

.size libgo_make_fcontext,.-libgo_make_fcontext

# 标记不需要可执行栈（安全增强）
.section .note.GNU-stack,"",%progbits